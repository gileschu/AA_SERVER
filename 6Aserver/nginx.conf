worker_processes  2;
error_log /var/log/resty/error.log warn;
events {
    worker_connections 1024;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/resty/access.log  main;

    upstream backend {
        drizzle_server 192.168.1.62:3306 protocol=mysql
                       dbname=userinfo user=root password=123 charset=utf8;
        drizzle_keepalive max=10 overflow=ignore mode=single;
    }

    server {
        listen 80;

        location @user-by-name {
        content_by_lua_file /opt/openresty/work/conf/user.lua;
        }

        location @user-by-id {
            set_quote_sql_str $id $arg_id;
            drizzle_query 'select * from user_info where userid=$id';
            drizzle_pass backend;
            rds_json on;
        }

        location = /puinfo {
       
        content_by_lua '
            local uri_args = ngx.req.get_uri_args()  
            local id = uri_args["userid"]
            local curtime = uri_args["curtime"]
            local mysql = require "resty.mysql"
            local db,err = mysql:new()
            if not db then
                    ngx.say("failed to instantiate mysql: ",err)
                    return
            end

            db:set_timeout(1000)

            local ok,err,errno,sqlstate = db:connect
            {
                    host = "192.168.1.113",
                    port = 3306,
                    database = "chinau_6a",
                    user = "dev",
                    password = "123",
                    max_package_size = 1024
            }
            if not ok then
                    ngx.say("failed to connect: ", err, ": ", errno, " ", sqlstate)
                    return
            end
            db:query("SET NAMES utf8;")
            local sql= string.format("select id,username,nick_name,sex, blood,image,image_history1,FROM_UNIXTIME(birthday,\'%%Y-%%c-%%e\') birthday,province_id, city_id,area_id,updatetime from chinau_member where id=%s and updatetime>%d",id,curtime)
            ngx.log(ngx.ERR,sql)
            res, err, errno, sqlstate = db:query(sql)
            if not res then
                ngx.say("bad result: ", err, ": ", errno, ": ", sqlstate, ".")
                return
            end
            local cjson = require "cjson" 
            ngx.say(cjson.encode(res))

            local ok, err = db:set_keepalive(10000, 100)
                if not ok then
                    ngx.say("failed to set keepalive: ", err)
                    return
                end

           ';
        }

        location = /user {
            access_by_lua '
                if ngx.var.arg_name then
                    return ngx.exec("@user-by-name")
                end

                if ngx.var.arg_id then
                    return ngx.exec("@user-by-id")
                end
            ';

            rds_json_ret 400 "expecting \"name\" or \"id\" 你么好啊 s";
        }
       location = /dstatus{
            set_quote_sql_str $id $arg_userid;
            drizzle_query 'select * from data_status where userid=$id';
            drizzle_pass backend;
            rds_json on;
        }
        location = /userctrlmode{
            set_quote_sql_str $id $arg_userid;
            drizzle_query 'select man_auto from user_ctrlmode where userid=$id';
            drizzle_pass backend;
            rds_json on;
        }

        location = /progtogame{
         content_by_lua '
            local uri_args = ngx.req.get_uri_args()  
            local prog_md5 = uri_args["progmd5"]
            local userid = uri_args["userid"]
            local mysql = require "resty.mysql"
            local db,err = mysql:new()
            if not db then
                    ngx.say("failed to instantiate mysql: ",err)
                    return
            end

            db:set_timeout(1000)

            local ok,err,errno,sqlstate = db:connect
            {
                    host = "192.168.1.113",
                    port = 3306,
                    database = "gm_data",
                    user = "dev",
                    password = "123",
                    max_package_size = 1024
            }
            if not ok then
                    ngx.say("failed to connect: ", err, ": ", errno, " ", sqlstate)
                    return
            end



            local sql
            if prog_md5 == "all" then
                sql = "select progmd5,gameid from prog_to_game;"
            else
                sql = "select b.id as gameid,name,iconurl,type, CAST(UNIX_TIMESTAMP() AS UNSIGNED) updatesign,progmd5,jburl,prog_title,prog_classname from prog_to_game a,hd_game b where a.progmd5=\'"..prog_md5.."\' and a.gameid=b.id"
            end
            db:query("SET NAMES utf8;")
            local  res, err, errno, sqlstate =
                    db:query(sql, 10)
            if not res then
                ngx.say("bad result: ", err, ": ", errno, ": ", sqlstate, ".")
                return
            end
            if next(res) == nil then
                ngx.say("res is null")
                return
            end
            -- for i, row in ipairs(res) do  
            --    for name, value in pairs(row) do  
            --      ngx.say("select row ", i, " : ", name, " = ", value, "<br/>")  
            --    end  
            -- end  
            local gameid = res[1]["gameid"]
            local curtime = res[1]["updatesign"]
            -- ngx.print(gameid,userid)

            local sql_exist =string.format("select 1 from hd_user_gameinfo where userid=%s and gameid=%d", userid, gameid)
            local res2, err2, errno2, sqlstate2 =
                    db:query(sql_exist, 10)
            -- for i, row in ipairs(res2) do  
            --    for name, value in pairs(row) do  
            --      ngx.say("select row ", i, " : ", name, " = ", value, "<br/>")  
            --    end  
            -- end
            -- ngx.say(type(res))
            if next(res2) == nil then
                sql = "insert into hd_user_gameinfo(userid,gameid,topmost,playtimes,lastplaytime,updatesign,status) values("..userid..","..gameid..",0,0,UNIX_TIMESTAMP(),"..curtime..",-1)"
                -- ngx.print(sql)
                res2, err2, errno2, sqlstate2 =
                        db:query(sql, 10)
                if not res2 then
                    ngx.say("bad result: ", err, ": ", errno2, ": ", sqlstate2, ".")
                    return
                end
            end

            local cjson = require "cjson" 
            ngx.say(cjson.encode(res))

            local ok, err = db:set_keepalive(10000, 100)
                if not ok then
                    ngx.say("failed to set keepalive: ", err)
                    return
                end

        ';
        }

        location = /gm{
         content_by_lua '
            local uri_args = ngx.req.get_uri_args()  
            local gameid = uri_args["gameid"]
            local mysql = require "resty.mysql"
            local db,err = mysql:new()
            if not db then
                    ngx.say("failed to instantiate mysql: ",err)
                    return
            end

            db:set_timeout(1000)

            local ok,err,errno,sqlstate = db:connect
            {
                    host = "192.168.1.113",
                    port = 3306,
                    database = "gm_data",
                    user = "dev",
                    password = "123",
                    max_package_size = 1024
            }
            if not ok then
                    ngx.say("failed to connect: ", err, ": ", errno, " ", sqlstate)
                    return
            end
            local ok, err = db:set_keepalive(10000, 100)
                if not ok then
                    ngx.say("failed to set keepalive: ", err)
                    return
                end

            local sql
            if gameid == "-1" then
                sql = "select  gameid,name,iconurl,topmost,playtimes,type from game_manage;"
            else
                sql = "select  gameid,name,iconurl,topmost,playtimes,type from game_manage where gameid="..gameid
            end

            local  res, err, errno, sqlstate =
                    db:query(sql, 10)
            if not res then
                ngx.say("bad result: ", err, ": ", errno, ": ", sqlstate, ".")
                return
            end
            local cjson = require "cjson" 
            ngx.say(cjson.encode(res))

        ';
        }

        location = /usergameinfo{
         content_by_lua '
            local uri_args = ngx.req.get_uri_args()  
            local userid = uri_args["userid"]
            local curtime = uri_args["curtime"]
            local mysql = require "resty.mysql"
            local db,err = mysql:new()
            if not db then
                    ngx.say("failed to instantiate mysql: ",err)
                    return
            end

            db:set_timeout(1000)

            local ok,err,errno,sqlstate = db:connect
            {
                    host = "192.168.1.113",
                    port = 3306,
                    database = "gm_data",
                    user = "dev",
                    password = "123",
                    max_package_size = 1024
            }
            if not ok then
                    ngx.say("failed to connect: ", err, ": ", errno, " ", sqlstate)
                    return
            end


            -- local sql = string.format("select  a.gameid,name,iconurl,type,progmd5,updatesign,b.status from game_manage a,hd_user_gameinfo b,prog_to_game c where userid=%d and updatesign>%d and a.gameid=b.gameid and c.gameid=b.gameid",userid, curtime)
            local sql = string.format("select  a.id as gameid,name,iconurl,type,updatesign,url,b.status,a.jburl,a.prog_title,a.prog_classname from hd_game a,hd_user_gameinfo b where userid=%d and updatesign>%d and a.id=b.gameid",userid, curtime)
            ngx.log(ngx.ERR,sql)
            db:query("SET NAMES utf8;")
            local  res, err, errno, sqlstate =
                    db:query(sql, 10)
            if not res then
                ngx.say("bad result: ", err, ": ", errno, ": ", sqlstate, ".")
                return
            end
            local cjson = require "cjson" 
            ngx.say(cjson.encode(res))

            local ok, err = db:set_keepalive(10000, 100)
                if not ok then
                    ngx.say("failed to set keepalive: ", err)
                    return
                end

        ';
        }
        location = /getprogmd5{
            set_quote_sql_str $id $arg_gameid;
            drizzle_query 'select progmd5,gameid from prog_to_game where gameid=$id';
            drizzle_pass backend;
            rds_json on;

          }
    }
}
