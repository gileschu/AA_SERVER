worker_processes  2;
error_log /var/log/resty/error.log info;
events {
    worker_connections 1024;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/resty/access.log  main;

    upstream backend {
        drizzle_server 192.168.1.113:3306 protocol=mysql
                       dbname=chinau_6a user=dev password=123 charset=utf8;
        drizzle_keepalive max=200 overflow=ignore mode=single;
    }
   upstream my_redis_node
   {
      server 192.168.1.62:6379;
      keepalive 1024 ;
   }
    lua_package_path "/opt/openresty/work/conf/?.lua;;";
    server {
        listen 80;
        #lua缓存
        lua_code_cache off;
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
        root html;
        }
        location = /mysql
        {
            #set $sql "select * from chinau_member";
            set_unescape_uri  $sql $arg_sql;
            #echo $sql;
            #set_quote_sql_str $quoted_name $sql;
            drizzle_query $sql;
            drizzle_pass backend;
            rds_json on;
        }



        location /redis {
            set_unescape_uri  $cmd $arg_cmd;
            redis2_query $cmd;
            redis2_pass my_redis_node;
        }

        location = /guinfo {
        access_by_lua_file /opt/openresty/work/conf/access.lua;
        content_by_lua_file /opt/openresty/work/conf/guser.lua;
        }

        location = /puinfo {
        access_by_lua_file /opt/openresty/work/conf/access.lua;
        content_by_lua_file /opt/openresty/work/conf/user.lua;

        }

       location = /dstatus{
            set_quote_sql_str $id $arg_userid;
            drizzle_query 'select * from data_status where userid=$id';
            drizzle_pass backend;
            rds_json on;
        }
        location = /userctrlmode{
            set_quote_sql_str $id $arg_userid;
            drizzle_query 'select man_auto from user_ctrlmode where userid=$id';
            drizzle_pass backend;
            rds_json on;
        }

        location = /progtogame{
            proxy_set_header   referer   "http://192.168.1.62";
            access_by_lua_file /opt/openresty/work/conf/access.lua;
            content_by_lua_file /opt/openresty/work/conf/progtogame.lua;
         }


        location = /usergameinfo{
        access_by_lua_file /opt/openresty/work/conf/access.lua;
        content_by_lua_file /opt/openresty/work/conf/usergameinfo.lua;
        }

        location = /hb{
        access_by_lua_file /opt/openresty/work/conf/access.lua;
        content_by_lua_file /opt/openresty/work/conf/heartbeat.lua;
        }

        location = /getprogmd5{
            set_quote_sql_str $id $arg_gameid;
            drizzle_query 'select progmd5,gameid from prog_to_game where gameid=$id';
            drizzle_pass backend;
            rds_json on;

          }

        location = /account {
            lua_need_request_body on;
            content_by_lua_file /opt/openresty/work/conf/account.lua;
        }

        location = /online {
            content_by_lua_file /opt/openresty/work/conf/online.lua;
        }
        location = /sns/like {
            proxy_set_header   Content-Type   "application/x-www-form-urlencoded";
            content_by_lua_file /opt/openresty/work/conf/sns/like.lua;
        }
        location = /api {
            access_by_lua '
                local tokentool = require "tokentool"
                local args = ngx.req.get_uri_args(10)
                if args.token == nil then
                    ngx.exit(ngx.HTTP_FORBIDDEN)
                end
                local ret = tokentool.has_token(args.token)
                if ret == ngx.null then
                    ngx.exit(ngx.HTTP_FORBIDDEN)
                elseif ret == false then
                    ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                end
            ';

            content_by_lua '
                ngx.say("token ok")
            ';
        }
    }
}
